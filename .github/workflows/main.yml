name: Build, Test, Security Scan, and Deploy Bookstore App
on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

env:
  JAVA_VERSION: '17'
  JAVA_DISTRIBUTION: 'temurin'
  APP_NAME: 'bookstore'
  DEPLOY_PORT: '8080'
  REGISTRY: 'ghcr.io'
  IMAGE_NAME: '${{ github.repository }}/bookstore'

jobs:
  # Code Quality and Security Analysis
  code-analysis:
    name: Code Quality & Security Analysis
    runs-on: self-hosted
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
        
      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          cache: maven
          
      - name: Make Maven wrapper executable
        run: |
          cd ${{ env.APP_NAME }}
          chmod +x ./mvnw
          
      # Dependency vulnerability scanning
      - name: Run OWASP Dependency Check
        run: |
          cd ${{ env.APP_NAME }}
          ./mvnw org.owasp:dependency-check-maven:check --batch-mode
          
      - name: Upload OWASP report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: owasp-report
          path: ${{ env.APP_NAME }}/target/dependency-check-report.html
          retention-days: 5
          
      # Code quality with SpotBugs
      - name: Run SpotBugs analysis
        run: |
          cd ${{ env.APP_NAME }}
          ./mvnw compile spotbugs:check --batch-mode || true
          
      # License compliance check
      - name: License scan
        run: |
          cd ${{ env.APP_NAME }}
          ./mvnw license:check --batch-mode || true

  # Unit and Integration Tests
  test:
    name: Run Tests & Code Coverage
    runs-on: self-hosted
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
        
      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          cache: maven
          
      - name: Make Maven wrapper executable
        run: |
          cd ${{ env.APP_NAME }}
          chmod +x ./mvnw
          
      - name: Run unit tests with coverage
        run: |
          cd ${{ env.APP_NAME }}
          ./mvnw clean test jacoco:report --batch-mode --no-transfer-progress
          
      - name: Run integration tests
        run: |
          cd ${{ env.APP_NAME }}
          ./mvnw verify -Pintegration-tests --batch-mode --no-transfer-progress || true
          
      - name: Generate test report
        if: always()
        run: |
          cd ${{ env.APP_NAME }}
          echo "=== Test Results ==="
          if [ -d "target/surefire-reports" ]; then
            find target/surefire-reports -name "*.xml" -exec grep -l "testcase" {} \; | wc -l | xargs echo "Test files found:"
            echo "Coverage report location: target/site/jacoco/index.html"
          fi
          
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            ${{ env.APP_NAME }}/target/surefire-reports/
            ${{ env.APP_NAME }}/target/site/jacoco/
          retention-days: 5

  # Build Application
  build:
    name: Build Application
    runs-on: self-hosted
    needs: [code-analysis, test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
        
      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          cache: maven
          
      - name: Make Maven wrapper executable
        run: |
          cd ${{ env.APP_NAME }}
          chmod +x ./mvnw
          
      - name: Build application
        run: |
          cd ${{ env.APP_NAME }}
          ./mvnw clean package -DskipTests --batch-mode --no-transfer-progress
          
      - name: Verify JAR file
        run: |
          cd ${{ env.APP_NAME }}
          echo "=== Built JAR files ==="
          ls -la target/*.jar
          
      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-jar
          path: ${{ env.APP_NAME }}/target/*.jar
          retention-days: 5

  # Container Security Scanning
  container-security:
    name: Container Security Scan
    runs-on: self-hosted
    needs: build
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-jar
          path: ${{ env.APP_NAME }}/target/
          
      - name: Build Docker image for scanning
        run: |
          echo "Building Docker image for security scanning..."
          docker build -t ${{ env.APP_NAME }}:scan .
          
      - name: Install Trivy
        run: |
          # Install Trivy if not already installed
          if ! command -v trivy &> /dev/null; then
            sudo apt-get update
            sudo apt-get install wget apt-transport-https gnupg lsb-release -y
            wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
            echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
            sudo apt-get update
            sudo apt-get install trivy -y
          fi
          trivy --version
          
      - name: Run Trivy vulnerability scanner - Filesystem
        run: |
          echo "=== Scanning source code and dependencies ==="
          trivy fs --format table --exit-code 0 ${{ env.APP_NAME }}/
          
      - name: Run Trivy vulnerability scanner - Container Image
        run: |
          echo "=== Scanning Docker image ==="
          trivy image --format table --exit-code 0 ${{ env.APP_NAME }}:scan
          
      - name: Run Trivy vulnerability scanner - Generate JSON report
        run: |
          echo "=== Generating detailed security report ==="
          trivy image --format json --output trivy-report.json ${{ env.APP_NAME }}:scan
          trivy image --format sarif --output trivy-results.sarif ${{ env.APP_NAME }}:scan
          
      - name: Upload Trivy scan results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trivy-scan-results
          path: |
            trivy-report.json
            trivy-results.sarif
          retention-days: 5
          
      # Optional: Fail pipeline on high/critical vulnerabilities
      - name: Check for critical vulnerabilities
        run: |
          echo "=== Checking for critical vulnerabilities ==="
          # This will exit with code 1 if HIGH or CRITICAL vulnerabilities are found
          trivy image --exit-code 1 --severity HIGH,CRITICAL ${{ env.APP_NAME }}:scan || {
            echo "⚠️ High or Critical vulnerabilities found!"
            echo "Check the detailed report in artifacts"
            # Uncomment the next line to fail the pipeline on critical vulnerabilities
            # exit 1
          }

  # Deploy Application
  deploy:
    name: Deploy Application
    runs-on: self-hosted
    needs: [test, build, container-security]
    if: github.ref == 'refs/heads/main'  # Only deploy from main branch
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
        
      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-jar
          path: ${{ env.APP_NAME }}/target/
          
      - name: Verify downloaded artifacts
        run: |
          cd ${{ env.APP_NAME }}
          echo "=== Downloaded artifacts ==="
          ls -la target/
          
      - name: Check Docker and Docker Compose
        run: |
          echo "=== Docker version ==="
          docker --version
          echo "=== Docker Compose version ==="
          docker-compose --version || docker compose version
          
      - name: Pre-deployment cleanup
        run: |
          echo "Stopping existing containers..."
          docker-compose down --remove-orphans || true
          echo "Cleaning up old database volume..."
          docker volume rm bookstore-ci-cd_db_data || true
          echo "Cleaning up old images..."
          docker system prune -f || true
          
      - name: Build and deploy with Docker Compose
        run: |
          echo "Building and starting containers..."
          docker-compose up -d --build --force-recreate
          
      - name: Wait for services to be ready
        run: |
          echo "Waiting for services to start..."
          sleep 10
          
          # Wait for database
          echo "Checking database connectivity..."
          timeout=30
          counter=0
          while [ $counter -lt $timeout ]; do
            if docker-compose exec -T db pg_isready -U bookstore_user -d bookstore_db; then
              echo "✅ Database is ready"
              break
            fi
            sleep 2
            counter=$((counter + 2))
          done
          
          # Wait for application
          echo "Waiting for application to start..."
          timeout=60
          counter=0
          while [ $counter -lt $timeout ]; do
            if curl -f http://localhost:${{ env.DEPLOY_PORT }}/actuator/health 2>/dev/null; then
              echo "✅ Application is responding!"
              break
            elif curl -f http://localhost:${{ env.DEPLOY_PORT }} 2>/dev/null; then
              echo "✅ Application is responding!"
              break
            fi
            echo "Waiting... ($counter/$timeout)"
            sleep 3
            counter=$((counter + 3))
          done
          
      - name: Deployment verification
        run: |
          echo "=== Deployment Verification ==="
          
          # Container status
          echo "Container Status:"
          docker-compose ps
          
          # Resource usage
          echo ""
          echo "Resource Usage:"
          docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}" || true
          
          # Network connectivity test
          echo ""
          echo "Network Tests:"
          curl -s http://localhost:${{ env.DEPLOY_PORT }}/actuator/health | jq '.' || echo "Health endpoint not available"
          
          # Database connectivity test
          echo ""
          echo "Database Connectivity:"
          docker-compose exec -T db psql -U bookstore_user -d bookstore_db -c "SELECT version();" || echo "Database query failed"
          
      - name: Final health check
        if: always()
        run: |
          echo "=== Final Health Check ==="
          
          if curl -f http://localhost:${{ env.DEPLOY_PORT }}/actuator/health 2>/dev/null; then
            echo "✅ Health endpoint responding"
            echo "✅ Deployment successful!"
          elif curl -f http://localhost:${{ env.DEPLOY_PORT }} 2>/dev/null; then
            echo "✅ Application endpoint responding"
            echo "✅ Deployment successful!"
          else
            echo "⚠️ Application may not be responding on port ${{ env.DEPLOY_PORT }}"
            echo "Container status:"
            docker-compose ps
            echo ""
            echo "Application logs:"
            docker-compose logs app || true
          fi
          
          echo ""
          echo "🌐 Application URLs:"
          echo "   - http://localhost:${{ env.DEPLOY_PORT }}"
          echo "   - http://$(hostname -I | awk '{print $1}'):${{ env.DEPLOY_PORT }}"

  # Post-deployment smoke tests
  smoke-tests:
    name: Post-Deployment Smoke Tests
    runs-on: self-hosted
    needs: deploy
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Basic endpoint tests
        run: |
          echo "=== Running Smoke Tests ==="
          
          # Test health endpoint
          if curl -f http://localhost:${{ env.DEPLOY_PORT }}/actuator/health; then
            echo "✅ Health check passed"
          else
            echo "❌ Health check failed"
            exit 1
          fi
          
          # Test main application endpoint
          if curl -f http://localhost:${{ env.DEPLOY_PORT }}; then
            echo "✅ Main endpoint accessible"
          else
            echo "❌ Main endpoint failed"
            exit 1
          fi
          
          echo "✅ All smoke tests passed!"