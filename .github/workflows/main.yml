name: Build, Test, and Deploy Bookstore App with Monitoring .

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

env:
  JAVA_VERSION: '17'
  JAVA_DISTRIBUTION: 'temurin'
  APP_NAME: 'bookstore'
  DEPLOY_PORT: '8080'
  PROMETHEUS_PORT: '9090'
  GRAFANA_PORT: '3000'

jobs:
  # Add a cleanup job to run first
  cleanup:
    name: Cleanup Runner Environment
    runs-on: self-hosted
    
    steps:
      - name: Cleanup workspace
        run: |
          echo "Cleaning up workspace..."
          echo "Current user: $(whoami)"
          echo "User groups: $(groups)"
          
          # Clean up any existing processes (more graceful)
          echo "Stopping Java processes..."
          pkill -f maven 2>/dev/null || echo "No maven processes found"
          pkill -f java 2>/dev/null || echo "No java processes found"
          
          # Wait a moment for processes to stop
          sleep 2
          
          # Clean up workspace files
          echo "Cleaning workspace files..."
          if [ -d "${GITHUB_WORKSPACE}" ]; then
            # Remove contents but preserve the directory structure
            find ${GITHUB_WORKSPACE} -mindepth 1 -delete 2>/dev/null || {
              echo "Cleaning accessible files only..."
              find ${GITHUB_WORKSPACE} -type f -user $(whoami) -delete 2>/dev/null || true
              find ${GITHUB_WORKSPACE} -type d -empty -user $(whoami) -delete 2>/dev/null || true
            }
          fi
          
          # Clean up docker containers if docker is accessible
          echo "Cleaning up Docker resources..."
          if command -v docker &> /dev/null; then
            if docker info &> /dev/null; then
              echo "Docker is accessible, cleaning up..."
              docker container prune -f 2>/dev/null || echo "Docker container cleanup skipped"
              docker image prune -f 2>/dev/null || echo "Docker image cleanup skipped"
              docker network prune -f 2>/dev/null || echo "Docker network cleanup skipped"
              docker volume prune -f 2>/dev/null || echo "Docker volume cleanup skipped"
            else
              echo "Docker daemon not accessible or not running"
            fi
          else
            echo "Docker command not found"
          fi
          
          # Clean up any leftover artifacts
          echo "Cleaning up artifacts..."
          rm -rf /tmp/github-actions-* 2>/dev/null || true
          
          echo "✅ Cleanup completed successfully"
        continue-on-error: true

  test:
    name: Run Tests & Code Coverage
    runs-on: self-hosted
    needs: cleanup
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          clean: true  # Force clean checkout
        
      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          cache: maven
          
      - name: Make Maven wrapper executable
        run: |
          cd ${{ env.APP_NAME }}
          chmod +x ./mvnw
          
      - name: Verify Maven wrapper
        run: |
          cd ${{ env.APP_NAME }}
          ls -la ./mvnw
          ./mvnw --version
          
      - name: Run tests with coverage
        run: |
          cd ${{ env.APP_NAME }}
          ./mvnw clean test jacoco:report --batch-mode --no-transfer-progress
        timeout-minutes: 15  # Add timeout to prevent hanging
          
      - name: Generate test report summary
        if: always()
        run: |
          cd ${{ env.APP_NAME }}
          echo "=== Test Results Summary ==="
          if [ -d "target/surefire-reports" ]; then
            test_files=$(find target/surefire-reports -name "*.xml" -exec grep -l "testcase" {} \; | wc -l)
            echo "Test files found: $test_files"
            
            # Create a summary instead of uploading all files
            echo "Creating test summary..."
            mkdir -p test-summary
            
            # Extract key metrics
            if [ -f "target/site/jacoco/index.html" ]; then
              grep -o "Total.*[0-9]\+%" target/site/jacoco/index.html > test-summary/coverage-summary.txt || echo "Coverage: Available in target/site/jacoco/" > test-summary/coverage-summary.txt
            fi
            
            # Copy only essential test results (not all XML files)
            cp target/surefire-reports/TEST-*.txt test-summary/ 2>/dev/null || echo "No .txt test reports found"
            
            echo "Test summary created in test-summary/"
            ls -la test-summary/
          fi
          
      - name: Upload test results (optimized)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ github.run_id }}
          path: |
            ${{ env.APP_NAME }}/test-summary/
          retention-days: 5
          if-no-files-found: warn

  build:
    name: Build Application
    runs-on: self-hosted
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          clean: true
        
      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          cache: maven
          
      - name: Make Maven wrapper executable
        run: |
          cd ${{ env.APP_NAME }}
          chmod +x ./mvnw
          
      - name: Build application
        run: |
          cd ${{ env.APP_NAME }}
          ./mvnw clean package -DskipTests --batch-mode --no-transfer-progress
        timeout-minutes: 10
          
      - name: Verify and optimize JAR file
        run: |
          cd ${{ env.APP_NAME }}
          echo "=== Built JAR files ==="
          ls -la target/*.jar
          
          # Create optimized artifact directory
          mkdir -p optimized-jar
          
          # Copy only the main JAR file (not sources, tests, etc.)
          cp target/${{ env.APP_NAME }}-*.jar optimized-jar/ 2>/dev/null || cp target/*.jar optimized-jar/
          
          echo "=== Optimized JAR directory ==="
          ls -la optimized-jar/
          du -sh optimized-jar/
          
      - name: Upload JAR artifact (optimized)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-jar-${{ github.run_id }}
          path: ${{ env.APP_NAME }}/optimized-jar/
          retention-days: 5
          compression-level: 6  # Add compression

  security-scan:
    name: Basic Security Scan
    runs-on: self-hosted
    needs: build
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          clean: true
        
      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-jar-${{ github.run_id }}
          path: ${{ env.APP_NAME }}/target/
          
      - name: Build Docker image for scanning
        run: |
          echo "Building Docker image for security scanning..."
          # Copy JAR to expected location
          cp ${{ env.APP_NAME }}/target/*.jar ${{ env.APP_NAME }}/target/app.jar 2>/dev/null || true
          docker build -t ${{ env.APP_NAME }}:scan-${{ github.run_id }} .
          
      - name: Install Trivy
        run: |
          if ! command -v trivy &> /dev/null; then
            sudo apt-get update
            sudo apt-get install wget apt-transport-https gnupg lsb-release -y
            wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
            echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
            sudo apt-get update
            sudo apt-get install trivy -y
          fi
          trivy --version
          
      - name: Run Trivy filesystem scan
        run: |
          echo "=== Scanning source code ==="
          trivy fs \
            --scanners vuln \
            --severity HIGH,CRITICAL \
            --timeout 10m \
            --format table \
            --exit-code 0 \
            ${{ env.APP_NAME }}/
        timeout-minutes: 12
          
      - name: Run Trivy container scan (optimized)
        run: |
          echo "=== Scanning Docker image ==="
          
          # Create optimized scan results directory
          mkdir -p scan-results
          
          trivy image \
            --scanners vuln \
            --severity HIGH,CRITICAL \
            --timeout 15m \
            --format json \
            --output scan-results/trivy-report.json \
            ${{ env.APP_NAME }}:scan-${{ github.run_id }}
            
          # Create summary report (smaller file)
          trivy image \
            --scanners vuln \
            --severity HIGH,CRITICAL \
            --timeout 5m \
            --format table \
            --output scan-results/trivy-summary.txt \
            ${{ env.APP_NAME }}:scan-${{ github.run_id }}
            
          echo "Scan results size:"
          du -sh scan-results/
        timeout-minutes: 20
          
      - name: Upload Trivy scan results (optimized)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trivy-scan-results-${{ github.run_id }}
          path: scan-results/
          retention-days: 5
          compression-level: 9  # Maximum compression for scan results
          
      - name: Cleanup scan image
        if: always()
        run: |
          docker rmi ${{ env.APP_NAME }}:scan-${{ github.run_id }} || true

  setup-monitoring:
    name: Setup Monitoring Configuration
    runs-on: self-hosted
    needs: [test, build, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          clean: true
        
      - name: Create monitoring directories
        run: |
          echo "Creating monitoring configuration directories..."
          mkdir -p monitoring/prometheus/rules
          mkdir -p monitoring/grafana/provisioning/datasources
          mkdir -p monitoring/grafana/provisioning/dashboards
          mkdir -p monitoring/grafana/dashboards
          
      - name: Setup Prometheus configuration
        run: |
          echo "Setting up Prometheus configuration..."
          # This will be created from the artifacts above
          ls -la monitoring/ || echo "Monitoring directory structure:"
          find monitoring/ -type d || echo "No monitoring directories found yet"
          
      - name: Verify monitoring setup
        run: |
          echo "=== Monitoring Setup Verification ==="
          echo "Directories created:"
          find monitoring/ -type d
          echo "Ready for deployment with monitoring stack"

  deploy:
    name: Deploy Application with Monitoring
    runs-on: self-hosted
    needs: [test, build, security-scan, setup-monitoring]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          clean: true
        
      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-jar-${{ github.run_id }}
          path: ${{ env.APP_NAME }}/target/
          
      - name: Verify downloaded artifacts
        run: |
          cd ${{ env.APP_NAME }}
          echo "=== Downloaded artifacts ==="
          ls -la target/
          
          # Ensure JAR is in the right place for Docker build
          if [ ! -f target/app.jar ]; then
            cp target/*.jar target/app.jar 2>/dev/null || echo "Warning: Could not find JAR file"
          fi
          
      - name: Create monitoring configuration files
        run: |
          echo "Creating monitoring configuration files..."
          
          # Create Prometheus config
          mkdir -p monitoring/prometheus/rules
          cat > monitoring/prometheus/prometheus.yml << 'EOF'
          global:
            scrape_interval: 15s
            evaluation_interval: 15s
          
          scrape_configs:
            - job_name: 'prometheus'
              static_configs:
                - targets: ['localhost:9090']
          
            - job_name: 'bookstore-app'
              metrics_path: '/actuator/prometheus'
              scrape_interval: 10s
              static_configs:
                - targets: ['app:8080']
              scrape_timeout: 10s
          
            - job_name: 'node-exporter'
              static_configs:
                - targets: ['node-exporter:9100']
          
            - job_name: 'cadvisor'
              static_configs:
                - targets: ['cadvisor:8080']
          EOF
          
          # Create Grafana datasource config
          mkdir -p monitoring/grafana/provisioning/datasources
          cat > monitoring/grafana/provisioning/datasources/prometheus.yml << 'EOF'
          apiVersion: 1
          datasources:
            - name: Prometheus
              type: prometheus
              access: proxy
              url: http://prometheus:9090
              isDefault: true
              editable: true
              jsonData:
                timeInterval: "5s"
          EOF
          
          # Create Grafana dashboard provisioning config
          mkdir -p monitoring/grafana/provisioning/dashboards
          cat > monitoring/grafana/provisioning/dashboards/dashboards.yml << 'EOF'
          apiVersion: 1
          providers:
            - name: 'default'
              orgId: 1
              folder: ''
              type: file
              disableDeletion: false
              updateIntervalSeconds: 10
              allowUiUpdates: true
              options:
                path: /var/lib/grafana/dashboards
          EOF
          
          # Create basic dashboard for Spring Boot app
          mkdir -p monitoring/grafana/dashboards
          cat > monitoring/grafana/dashboards/spring-boot-dashboard.json << 'EOF'
          {
            "dashboard": {
              "id": null,
              "title": "Bookstore Application Monitoring",
              "tags": ["spring-boot", "bookstore"],
              "timezone": "",
              "panels": [
                {
                  "id": 1,
                  "title": "Application Health",
                  "type": "stat",
                  "targets": [
                    {
                      "expr": "up{job=\"bookstore-app\"}",
                      "legendFormat": "App Status"
                    }
                  ],
                  "gridPos": {"h": 8, "w": 6, "x": 0, "y": 0}
                },
                {
                  "id": 2,
                  "title": "HTTP Request Rate",
                  "type": "graph",
                  "targets": [
                    {
                      "expr": "rate(http_server_requests_seconds_count{job=\"bookstore-app\"}[5m])",
                      "legendFormat": "{{method}} {{uri}}"
                    }
                  ],
                  "gridPos": {"h": 8, "w": 18, "x": 6, "y": 0}
                }
              ],
              "time": {"from": "now-15m", "to": "now"},
              "refresh": "5s"
            }
          }
          EOF
          
      - name: Check Docker and Docker Compose
        run: |
          echo "=== Docker version ==="
          docker --version
          echo "=== Docker Compose version ==="
          docker-compose --version || docker compose version
          
      - name: Stop existing containers
        run: |
          echo "Stopping existing containers..."
          docker-compose down --remove-orphans || true
        timeout-minutes: 5
          
      - name: Clean up volumes
        run: |
          echo "Cleaning up old volumes..."
          docker volume rm bookstore-ci-cd_db_data || true
          docker volume rm bookstore-ci-cd_prometheus_data || true
          docker volume rm bookstore-ci-cd_grafana_data || true
          docker system prune -f || true
          
      - name: Build and deploy with Docker Compose
        run: |
          echo "Building and starting all containers including monitoring stack..."
          docker-compose up -d --build --force-recreate
        timeout-minutes: 15
          
      - name: Wait for services to start
        run: |
          echo "Waiting for all services to start..."
          
          timeout=120
          counter=0
          
          while [ $counter -lt $timeout ]; do
            # Check if containers are running
            if docker-compose ps | grep -q "Up"; then
              echo "Containers are running, checking service health..."
              sleep 10
              
              # Check application health
              app_healthy=false
              prometheus_healthy=false
              grafana_healthy=false
              
              # Check Spring Boot app
              if curl -f http://localhost:${{ env.DEPLOY_PORT }}/actuator/health 2>/dev/null; then
                echo "✅ Application is responding!"
                app_healthy=true
              fi
              
              # Check Prometheus
              if curl -f http://localhost:${{ env.PROMETHEUS_PORT }}/-/healthy 2>/dev/null; then
                echo "✅ Prometheus is responding!"
                prometheus_healthy=true
              fi
              
              # Check Grafana
              if curl -f http://localhost:${{ env.GRAFANA_PORT }}/api/health 2>/dev/null; then
                echo "✅ Grafana is responding!"
                grafana_healthy=true
              fi
              
              if [ "$app_healthy" = true ] && [ "$prometheus_healthy" = true ] && [ "$grafana_healthy" = true ]; then
                echo "🎉 All services are healthy!"
                break
              fi
            fi
            
            echo "Waiting... ($counter/$timeout)"
            sleep 5
            counter=$((counter + 5))
          done
          
          if [ $counter -ge $timeout ]; then
            echo "⚠️ Some services may not be fully ready yet"
            echo "Container status:"
            docker-compose ps
          fi
          
      - name: Verify monitoring metrics
        run: |
          echo "=== Verifying Monitoring Setup ==="
          
          # Wait a bit more for metrics to be available
          sleep 15
          
          # Check if Prometheus can scrape the application
          echo "Checking Prometheus targets..."
          if curl -s http://localhost:${{ env.PROMETHEUS_PORT }}/api/v1/targets | grep -q "bookstore-app"; then
            echo "✅ Prometheus is scraping bookstore application"
          else
            echo "⚠️ Prometheus may not be scraping bookstore application yet"
          fi
          
          # Check if application metrics are available
          echo "Checking application metrics endpoint..."
          if curl -f http://localhost:${{ env.DEPLOY_PORT }}/actuator/prometheus 2>/dev/null | head -10; then
            echo "✅ Application metrics endpoint is working"
          else
            echo "⚠️ Application metrics endpoint may not be ready"
          fi
          
      - name: Final health check and service URLs
        run: |
          echo "=== Final Health Check ==="
          
          # Application health check
          if curl -f http://localhost:${{ env.DEPLOY_PORT }}/actuator/health 2>/dev/null; then
            echo "✅ Application health endpoint responding"
          else
            echo "⚠️ Application health endpoint not responding"
          fi
          
          # Prometheus health check
          if curl -f http://localhost:${{ env.PROMETHEUS_PORT }}/-/healthy 2>/dev/null; then
            echo "✅ Prometheus health endpoint responding"
          else
            echo "⚠️ Prometheus health endpoint not responding"
          fi
          
          # Grafana health check
          if curl -f http://localhost:${{ env.GRAFANA_PORT }}/api/health 2>/dev/null; then
            echo "✅ Grafana health endpoint responding"
          else
            echo "⚠️ Grafana health endpoint not responding"
          fi
          
          echo ""
          echo "🌐 Service URLs:"
          echo "   📱 Bookstore Application: http://localhost:${{ env.DEPLOY_PORT }}"
          echo "   📊 Prometheus: http://localhost:${{ env.PROMETHEUS_PORT }}"
          echo "   📈 Grafana: http://localhost:${{ env.GRAFANA_PORT }} (admin/admin123)"
          echo "   🔍 SonarQube: http://localhost:9000"
          echo ""
          echo "📋 Monitoring Endpoints:"
          echo "   🏥 App Health: http://localhost:${{ env.DEPLOY_PORT }}/actuator/health"
          echo "   📊 App Metrics: http://localhost:${{ env.DEPLOY_PORT }}/actuator/prometheus"
          echo "   🎯 Prometheus Targets: http://localhost:${{ env.PROMETHEUS_PORT }}/targets"
          
          echo ""
          echo "Container Status:"
          docker-compose ps

  # Monitoring validation job
  validate-monitoring:
    name: Validate Monitoring Stack
    runs-on: self-hosted
    needs: deploy
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Wait for monitoring stack stabilization
        run: |
          echo "Waiting for monitoring stack to stabilize..."
          sleep 30
          
      - name: Validate Prometheus configuration
        run: |
          echo "=== Validating Prometheus Configuration ==="
          
          # Check Prometheus config
          if curl -s http://localhost:${{ env.PROMETHEUS_PORT }}/api/v1/status/config | grep -q "bookstore-app"; then
            echo "✅ Prometheus configuration includes bookstore-app target"
          else
            echo "❌ Prometheus configuration missing bookstore-app target"
          fi
          
          # Check active targets
          active_targets=$(curl -s http://localhost:${{ env.PROMETHEUS_PORT }}/api/v1/targets | grep -o '"health":"up"' | wc -l)
          echo "📊 Active Prometheus targets: $active_targets"
          
      - name: Validate metrics collection
        run: |
          echo "=== Validating Metrics Collection ==="
          
          # Generate some traffic to create metrics
          echo "Generating sample traffic..."
          for i in {1..5}; do
            curl -s http://localhost:${{ env.DEPLOY_PORT }}/ > /dev/null || true
            curl -s http://localhost:${{ env.DEPLOY_PORT }}/actuator/health > /dev/null || true
            sleep 2
          done
          
          sleep 10
          
          # Check if metrics are being collected
          if curl -s "http://localhost:${{ env.PROMETHEUS_PORT }}/api/v1/query?query=up{job=\"bookstore-app\"}" | grep -q '"value":\[.*,"1"\]'; then
            echo "✅ Application metrics are being collected"
          else
            echo "⚠️ Application metrics may not be collected yet"
          fi
          
      - name: Test Grafana dashboard access
        run: |
          echo "=== Testing Grafana Dashboard Access ==="
          
          # Test Grafana API
          if curl -s -u admin:admin123 http://localhost:${{ env.GRAFANA_PORT }}/api/datasources | grep -q "Prometheus"; then
            echo "✅ Grafana can access Prometheus datasource"
          else
            echo "⚠️ Grafana may not have Prometheus datasource configured"
          fi
          
          # List available dashboards
          dashboard_count=$(curl -s -u admin:admin123 http://localhost:${{ env.GRAFANA_PORT }}/api/search | grep -o '"title"' | wc -l)
          echo "📊 Available Grafana dashboards: $dashboard_count"

  # Final cleanup job
  final-cleanup:
    name: Final Cleanup
    runs-on: self-hosted
    needs: [deploy, validate-monitoring]
    if: always()
    
    steps:
      - name: Cleanup artifacts and temporary containers
        run: |
          echo "Final cleanup..."
          # Clean up any temporary containers (keep the running services)
          docker container prune -f || true
          docker image prune -f || true
          
          # Clean up workspace but keep monitoring configs
          rm -rf ${GITHUB_WORKSPACE}/.git || true
          
          echo "✅ Final cleanup completed"
          echo "🚀 Deployment with monitoring stack is complete!"
        continue-on-error: true